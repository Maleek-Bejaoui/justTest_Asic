module boot_loader #(
    parameter RAM_ADR_WIDTH = 6,
    parameter RAM_SIZE = 64
)(
    input wire rst,
    input wire clk,
    input wire ce,
    input wire rx,
    output wire tx,
    output reg boot,
    input wire scan_memory,
    input wire [15:0] ram_out,
    output reg ram_rw,
    output reg ram_enable,
    output reg [RAM_ADR_WIDTH-1:0] ram_adr,
    output reg [15:0] ram_in
);

    typedef enum logic [3:0] {
        INIT, WAIT_RX_BYTE, INCR_RX_BYTE_COUNTER, WRITE_RX_BYTE, WAIT_SCAN_MEM,
        READ_TX_BYTE, INCR_TX_BYTE_COUNTER, ENABLE_TX, WAIT_8K_CYCLE, OVER
    } t_state;

    reg [7:0] rx_byte, tx_byte;
    reg rx_data_valid, rx_data_valid_dly, tx_data_valid;
    reg rx_word_valid;
    reg [7:0] rx_byte_reg, rx_byte_reg2;
    reg [15:0] rx_word;
    reg [1:0] byte_count;
    reg [RAM_ADR_WIDTH-1:0] rx_byte_count;
    reg enable_rx_byte_counter, init_byte_counter;
    t_state current_state, future_state;
    reg [14:0] tx_cycle_count;
    reg init_tx_cycle_count, tx_cycle_count_over;
    reg tx_data_valid_dly, tx_word_valid;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            rx_byte_count <= 0;
        end else if (ce) begin
            if (init_byte_counter) begin
                rx_byte_count <= 0;
            end else if (enable_rx_byte_counter) begin
                if (rx_byte_count == RAM_SIZE - 1) begin
                    rx_byte_count <= 0;
                end else begin
                    rx_byte_count <= rx_byte_count + 1;
                end
            end
        end
    end

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            tx_cycle_count <= 0;
            tx_cycle_count_over <= 0;
        end else if (ce) begin
            if (init_tx_cycle_count) begin
                tx_cycle_count <= 0;
                tx_cycle_count_over <= 0;
            end else if (tx_cycle_count == 18000) begin
                tx_cycle_count_over <= 1;
                tx_cycle_count <= 0;
            end else begin
                tx_cycle_count <= tx_cycle_count + 1;
                tx_cycle_count_over <= 0;
            end
        end
    end

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            current_state <= INIT;
        end else if (ce) begin
            current_state <= future_state;
        end
    end

    always @(*) begin
        case (current_state)
            INIT: future_state = WAIT_RX_BYTE;
            WAIT_RX_BYTE: future_state = (rx_word_valid) ? WRITE_RX_BYTE : WAIT_RX_BYTE;
            WRITE_RX_BYTE: future_state = (rx_byte_count == RAM_SIZE - 1) ? WAIT_SCAN_MEM : INCR_RX_BYTE_COUNTER;
            INCR_RX_BYTE_COUNTER: future_state = WAIT_RX_BYTE;
            WAIT_SCAN_MEM: future_state = (scan_memory) ? READ_TX_BYTE : WAIT_SCAN_MEM;
            INCR_TX_BYTE_COUNTER: future_state = WAIT_8K_CYCLE;
            WAIT_8K_CYCLE: future_state = (tx_cycle_count_over) ? READ_TX_BYTE : WAIT_8K_CYCLE;
            READ_TX_BYTE: future_state = ENABLE_TX;
            ENABLE_TX: future_state = (rx_byte_count == RAM_SIZE - 1) ? OVER : INCR_TX_BYTE_COUNTER;
            OVER: future_state = OVER;
        endcase
    end

    always @(*) begin
        case (current_state)
            INIT: begin
                ram_rw = 0;
                ram_enable = 1;
                tx_data_valid = 0;
                enable_rx_byte_counter = 0;
                boot = 1;
                init_byte_counter = 1;
                init_tx_cycle_count = 1;
            end
            WAIT_RX_BYTE: begin
                ram_rw = 0;
                ram_enable = 1;
                tx_data_valid = 0;
                enable_rx_byte_counter = 0;
                boot = 1;
                init_byte_counter = 0;
                init_tx_cycle_count = 1;
            end
            WRITE_RX_BYTE: begin
                ram_rw = 1;
                ram_enable = 1;
                tx_data_valid = 0;
                enable_rx_byte_counter = 0;
                boot = 1;
                init_byte_counter = 0;
                init_tx_cycle_count = 1;
            end
            default: begin
                ram_rw = 0;
                ram_enable = 0;
                tx_data_valid = 0;
                enable_rx_byte_counter = 0;
                boot = 0;
                init_byte_counter = 0;
                init_tx_cycle_count = 0;
            end
        endcase
    end
endmodule
